<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To Do List</title>

    <!-- Bootstrap Icon -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <style>
        body {
            background-color: #ffe9c4; /* Dark background color */
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: "Poppins", sans-serif;
        }

        .container {
            background-color: #14302b;
            color: #cebfb3;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        h1, .completed-heading {
            font-family: "Poppins", sans-serif;
            font-weight: 600;
            text-align: center;
            line-height: 0.5;
        }

        #task-input {
            border-radius: 20px;
            padding: 8px 12px;
            border: 1px solid #74746c;
            font-size: 16px;
        }

        #task-input:focus {
            border: 1px solid #617A55;
            outline: none;
        }

        .checkbox-custom {
            /* Add your custom styles here */
            position: relative;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            border: 1px solid #617A55;
            appearance: none;
            background-color: transparent;
            transition: all .3s;
            margin-right: 10px;
        }

        .checkbox-custom::before {
            content: '';
            position: absolute;
            border: solid #fff;
            display: block;
            width: .2em;
            height: .5em;
            border-width: 0 .1em .1em 0;
            z-index: 1;
            opacity: 0;
            right: calc(50% - .1em);
            top: calc(50% - .3em);
            transform: rotate(0deg);
            transition: all .3s;
            }

        .checkbox-custom:checked {
            background-color: #617A55;
        }

        .checkbox-custom:checked::before {
            opacity: 1;
            transform: rotate(405deg);
        }


        .add-btn {
            border-radius: 20px;
            padding: 8px 25px;
            font-size: 16px;
            background-color: #617A55;
            color: #ffffff;
            border: none;
            cursor: pointer;
        }

        .add-btn:hover {
            background-color: #9CA777;
        }

        .add-btn:focus {
            outline: none; 
        }

        /* Line-through task label when checkbox is checked */
        .task-label input[type="checkbox"]:checked + span {
            text-decoration: line-through;
        }

        .task-label {
            display: flex;
            align-items: center;
        }

        .task-label .delete-btn {
            margin-left: auto;
        }

        /* Remove bullet points from tasks */
        #task-list,
        #completed-list {
            list-style-type: none;
            padding: 0;
            position: relative;
        }

        /* Add a separator line */
        .separator {
            border: 1px dashed #374b47;
            margin: 20px 0;
        }

        /* Hide completed list, completed heading, and separator when there are no checked tasks */
        #completed-list,
        .completed-heading,
        .separator {
            display: none;
        }

        .delete-btn {
            padding: 5px;
            background-color: transparent;
            border: none;
            cursor: pointer;
        }

        .delete-btn:focus {
            outline: none;
        }

        .delete-btn i {
            color: #fd4741;
            font-size: 12px;
        }
    </style>
</head>

<body>

<div class="container">
    <h1>To Do List</h1>

    <form id="todo-form">
        <input type="text" id="task-input" placeholder="Enter task">
        <button type="submit" class="add-btn">Add</button>
    </form>

    <ul id="task-list">
        <!-- Tasks will be dynamically added here -->
    </ul>

    <hr class="separator">

    <h2 class="completed-heading">Completed</h2>
    <ul id="completed-list">
        <!-- Completed tasks will be dynamically added here -->
    </ul>
</div>


<script>
    // Function to create a delete button
    function createDeleteButton() {
        var deleteButton = document.createElement("button");
        deleteButton.className = "delete-btn";
        var deleteIcon = document.createElement("i");
        deleteIcon.className = "bi bi-trash";
        deleteButton.appendChild(deleteIcon);

        return deleteButton;
    }

    // Move unchecked task to the top of the task list
    function moveUncheckedTaskToTop(taskItem) {
        var taskList = document.getElementById("task-list");
        var firstTaskItem = taskList.firstChild;

        if (!taskItem.querySelector("input[type='checkbox']").checked) {
            taskList.insertBefore(taskItem, firstTaskItem);
        }
    }

    // Function to move completed task to the completed list
    function moveCompletedTask(taskItem) {
        var completedList = document.getElementById("completed-list");
        var firstCompletedTaskItem = completedList.firstChild;

        completedList.insertBefore(taskItem, firstCompletedTaskItem);
    }

    // Function to handle task completion and uncompletion
    function handleTaskCompletion(taskItem) {
        var checkbox = taskItem.querySelector("input[type='checkbox']");
        var taskList = taskItem.parentNode;
        var completedList = document.getElementById("completed-list");

        if (checkbox.checked) {
            taskList.removeChild(taskItem);
            completedList.appendChild(taskItem);
        } else {
            completedList.removeChild(taskItem);
            moveUncheckedTaskToTop(taskItem);
        }

        checkCompletedVisibility(); // Check visibility of the completed list
    }

    // Function to add a new task
    function addTask() {
        var taskInput = document.getElementById("task-input");
        var taskLabel = taskInput.value;

        if (taskLabel !== "") {
            var taskItem = document.createElement("li");
            taskItem.className = "task-label";

            var checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.className = "checkbox-custom";

            var labelSpan = document.createElement("span");
            labelSpan.textContent = taskLabel;

            var deleteButton = createDeleteButton();

            // Function to delete a task
            deleteButton.addEventListener("click", function () {
                taskItem.remove();
                checkCompletedVisibility(); // Check visibility of the completed list
            });

            // Function to handle task completion and uncompletion
            checkbox.addEventListener("change", function () {
                handleTaskCompletion(taskItem);
            });

            taskItem.appendChild(checkbox);
            taskItem.appendChild(labelSpan);
            taskItem.appendChild(deleteButton);

            document.getElementById("task-list").appendChild(taskItem);

            taskInput.value = ""; // Clear the input field
            moveUncheckedTaskToTop(taskItem); // Move unchecked task to the top
        }
    }

    document.getElementById("todo-form").addEventListener("submit", function (event) {
        event.preventDefault(); // Prevent form submission

        addTask();
    });

    // Move checked task to the completed list
    document.addEventListener("change", function (event) {
        var checkbox = event.target;
        if (checkbox.type === "checkbox") {
            var taskItem = checkbox.parentNode;
            var taskList = taskItem.parentNode;
            var completedList = document.getElementById("completed-list");
            var completedHeading = document.querySelector(".completed-heading");
            var separator = document.querySelector(".separator");

            if (taskList.id === "task-list" && checkbox.checked) {
                taskList.removeChild(taskItem);
                completedList.appendChild(taskItem);
            } else if (taskList.id === "completed-list" && !checkbox.checked) {
                completedList.removeChild(taskItem);
                taskList.appendChild(taskItem);
            }

            checkCompletedVisibility(); // Check visibility of the completed list
        }
    });

    // Check visibility of the completed list, completed heading, and separator
    function checkCompletedVisibility() {
        var completedList = document.getElementById("completed-list");
        var completedHeading = document.querySelector(".completed-heading");
        var separator = document.querySelector(".separator");

        if (completedList.children.length === 0) {
            completedList.style.display = "none";
            completedHeading.style.display = "none";
            separator.style.display = "none";
        } else {
            completedList.style.display = "block";
            completedHeading.style.display = "block";
            separator.style.display = "block";
        }
    }

    // Initial check for completed tasks on page load
    checkCompletedVisibility();
</script>


</body>
</html>
